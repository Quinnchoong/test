# -*- coding: utf-8 -*-
"""student_employability_app_final.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18-3dqWEVtZ9vWPIW7UxmFxQEr8itV66I
"""

# advanced_employability_app_final.py

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from datetime import datetime
import base64
import matplotlib.pyplot as plt

# --- Load Model & Scaler ---
# Load trained SVM model
with open("svm_model.pkl", "rb") as f:
    model = pickle.load(f)

# Load scaler used in training
with open("scaler.pkl", "rb") as f:
    scaler = pickle.load(f)

# --- Utility Functions ---

def generate_pdf_report(data, result, confidence):
    """
    Create and save a PDF report summarizing the prediction.
    """
    from fpdf import FPDF
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    pdf.cell(200, 10, txt="Employability Prediction Report", ln=True, align="C")
    pdf.ln(10)

    for k, v in data.items():
        pdf.cell(200, 10, txt=f"{k}: {v}", ln=True)

    pdf.ln(5)
    pdf.cell(200, 10, txt=f"Prediction: {result}", ln=True)
    pdf.cell(200, 10, txt=f"Confidence: {confidence:.2f}", ln=True)

    file_path = "prediction_report.pdf"
    pdf.output(file_path)
    return file_path

def get_pdf_download_link(file_path):
    """
    Generate a download link for the PDF report.
    """
    with open(file_path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode()
    href = f'<a href="data:application/octet-stream;base64,{b64}" download="prediction_report.pdf">📄 Download PDF Report</a>'
    return href


# --- Streamlit App Setup ---
st.set_page_config(
    page_title="Graduate Employability Prediction",
    page_icon="🎓",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Sidebar Content ---
st.sidebar.image(
    "https://upload.wikimedia.org/wikipedia/commons/thumb/1/1e/UNESCO_logo.svg/2560px-UNESCO_logo.svg.png",
    width=200
)

st.sidebar.title("About This App")
st.sidebar.markdown("""
This app predicts **graduate employability** based on academic and experiential attributes:
- GPA
- Internship
- Mock Interview
- Soft Skills
- Extracurricular

Uses a trained **Support Vector Machine (SVM)** model optimised with SMOTE.
Outputs: Prediction, confidence, feature insights, downloadable PDF report.

---
Developed for MSc Capstone Project.
""")

st.sidebar.info("Version: 2.0 | Last Updated: 2025-07-06")

# --- Main Header ---
st.title("🎓 Advanced Graduate Employability Dashboard")
st.subheader("Empowering HEIs with actionable, data-driven insights.")

# --- Tabs for Navigation ---
tab1, tab2, tab3 = st.tabs(["📋 Input Form", "📊 Feature Insights", "📄 Report"])

# ---------------- Tab 1: Input Form ----------------
with tab1:
    st.header("📋 Student Profile Input")

    with st.form("input_form", clear_on_submit=False):
        col1, col2, col3 = st.columns(3)

        with col1:
            gpa = st.number_input("GPA (0–4.0)", 0.0, 4.0, value=3.0, step=0.01)
            soft_skills = st.slider("Soft Skills (0–100)", 0, 100, 75)

        with col2:
            internship = st.slider("Internship (0–100)", 0, 100, 80)
            extracurricular = st.slider("Extracurricular (0–100)", 0, 100, 60)

        with col3:
            mock_interview = st.slider("Mock Interview (0–100)", 0, 100, 70)

        submitted = st.form_submit_button("🔮 Predict")

    # Prediction logic after submission
    if submitted:
        # Collect inputs & scale
        input_data = np.array([[gpa, internship, mock_interview, soft_skills, extracurricular]])
        input_scaled = scaler.transform(input_data)

        # Model prediction
        prediction = model.predict(input_scaled)[0]
        confidence = abs(model.decision_function(input_scaled)[0])

        # Result interpretation
        result = "✅ Employable" if prediction == 1 else "⚠️ At Risk"
        color = "green" if prediction == 1 else "red"

        # Store results in session state for use in other tabs
        st.session_state['data'] = {
            "GPA": gpa,
            "Internship": internship,
            "Mock Interview": mock_interview,
            "Soft Skills": soft_skills,
            "Extracurricular": extracurricular
        }
        st.session_state['result'] = result
        st.session_state['confidence'] = confidence

        # Display results
        st.markdown("---")
        st.metric(label="Prediction", value=f"{result}", delta=f"Confidence: {confidence:.2f}")

# ---------------- Tab 2: Feature Insights ----------------
with tab2:
    st.header("📊 Feature Contribution")

    if 'data' in st.session_state:
        df = pd.DataFrame([st.session_state['data']])
        # Horizontal bar chart of features
        df.T.plot(kind="barh", legend=False, figsize=(6, 3), color='skyblue')
        plt.xlabel("Feature Value")
        st.pyplot(plt.gcf())
        plt.clf()
    else:
        st.info("Please submit a prediction first on the 📋 Input Form tab.")

# ---------------- Tab 3: Report ----------------
with tab3:
    st.header("📄 Downloadable Prediction Report")

    if 'result' in st.session_state:
        pdf_path = generate_pdf_report(
            st.session_state['data'],
            st.session_state['result'],
            st.session_state['confidence']
        )
        st.markdown(get_pdf_download_link(pdf_path), unsafe_allow_html=True)

    else:
        st.info("Please submit a prediction first on the 📋 Input Form tab.")

# --- Footer ---
st.markdown("---")
st.caption("© 2025 Your Name / Your University | Graduate Employability Prediction App | For research purposes only.")